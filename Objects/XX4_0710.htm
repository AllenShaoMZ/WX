<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\XX4_0710.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\XX4_0710.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Oct 07 20:11:19 2024
<BR><P>
<H3>Maximum Stack Usage =        488 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
YkTask &rArr; DC_UART_Data_Analysis &rArr; UART_Data_Process &rArr; CX_UART_YK_Cmd_Process &rArr; delay_1ms &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1b7]">__user_initial_stackheap</a>
 <LI><a href="#[a5]">CPU_IntDis</a>
 <LI><a href="#[20f]">CPU_IntEn</a>
 <LI><a href="#[fb]">CPU_SR_Save</a>
 <LI><a href="#[fc]">CPU_SR_Restore</a>
 <LI><a href="#[210]">CPU_WaitForInt</a>
 <LI><a href="#[211]">CPU_WaitForExcept</a>
 <LI><a href="#[110]">CPU_CntLeadZeros</a>
 <LI><a href="#[114]">CPU_CntTrailZeros</a>
 <LI><a href="#[212]">CPU_RevBits</a>
 <LI><a href="#[148]">OSStartHighRdy</a>
 <LI><a href="#[142]">OSCtxSw</a>
 <LI><a href="#[140]">OSIntCtxSw</a>
 <LI><a href="#[12]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[2d]">CacheError_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">CacheError_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6c]">AOCCTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[6e]">AppTaskStart</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[24]">CAN_IRQHandler</a> from can.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2d]">CacheError_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6b]">CanTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[27]">ComBlk_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2c]">CommSwitchError_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2e]">DDR_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[21]">DMA_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[31]">ECC_Error_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[25]">ENVM0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[26]">ENVM1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[20]">EthernetMAC_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[34]">FAB_PLL_LockLost_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[33]">FAB_PLL_Lock_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[35]">FIC64_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6d]">FLYTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[36]">FabricIrq0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[40]">FabricIrq10_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[41]">FabricIrq11_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[42]">FabricIrq12_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[43]">FabricIrq13_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[44]">FabricIrq14_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[45]">FabricIrq15_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[37]">FabricIrq1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[38]">FabricIrq2_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[39]">FabricIrq3_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3a]">FabricIrq4_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3b]">FabricIrq5_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3c]">FabricIrq6_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3d]">FabricIrq7_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3e]">FabricIrq8_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3f]">FabricIrq9_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[46]">GPIO0_IRQHandler</a> from fpgacan.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[50]">GPIO10_IRQHandler</a> from extern.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[51]">GPIO11_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[52]">GPIO12_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[53]">GPIO13_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[54]">GPIO14_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[55]">GPIO15_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[56]">GPIO16_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[57]">GPIO17_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[58]">GPIO18_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[59]">GPIO19_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[47]">GPIO1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5a]">GPIO20_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5b]">GPIO21_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5c]">GPIO22_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5d]">GPIO23_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5e]">GPIO24_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5f]">GPIO25_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[60]">GPIO26_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[61]">GPIO27_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[62]">GPIO28_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[63]">GPIO29_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[48]">GPIO2_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[64]">GPIO30_IRQHandler</a> from extern.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[65]">GPIO31_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[49]">GPIO3_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4a]">GPIO4_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4b]">GPIO5_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4c]">GPIO6_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4d]">GPIO7_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4e]">GPIO8_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4f]">GPIO9_IRQHandler</a> from extern.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2f]">HPDMA_Complete_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[30]">HPDMA_Error_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[19]">I2C0_SMBAlert_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[1a]">I2C0_SMBus_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[1b]">I2C1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[1c]">I2C1_SMBAlert_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[1d]">I2C1_SMBus_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[32]">MDDR_IOCalib_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[68]">MainTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[12]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(CODE) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[13]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[130]">OS_IdleTask</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[171]">OS_StatTask</a> from os_stat.o(.text) referenced from os_stat.o(.text)
 <LI><a href="#[6f]">OS_TaskReturn</a> from os_task.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[1a3]">OS_TmrTask</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[2b]">PLL_LockLost_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2a]">PLL_Lock_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[15]">RTC_Wakeup_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[17]">SPI1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_m2sxxx.o(.text) referenced from startup_m2sxxx.o(.text)
 <LI><a href="#[22]">Timer1_IRQHandler</a> from extern.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[23]">Timer2_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[1e]">UART0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[1f]">UART1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[29]">USB_DMA_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[28]">USB_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[14]">WdogWakeup_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6a]">YCTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[69]">YkTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[73]">__main</a> from __main.o(!!!main) referenced from startup_m2sxxx.o(.text)
 <LI><a href="#[71]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[72]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[70]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[73]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[74]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[76]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1db]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1dc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1dd]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1de]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[77]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ac]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[79]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e0]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[80]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[85]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1f6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1f7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1f8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1f9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1fa]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1fb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[75]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1fd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[81]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSTaskStkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1b8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[84]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1ff]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[86]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CacheError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheError_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheError_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ComBlk_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CommSwitchError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ECC_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ENVM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ENVM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EthernetMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FAB_PLL_LockLost_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FAB_PLL_Lock_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FIC64_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>FabricIrq0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FabricIrq10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FabricIrq11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FabricIrq12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FabricIrq13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FabricIrq14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FabricIrq15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>FabricIrq1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>FabricIrq2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FabricIrq3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FabricIrq4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FabricIrq5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FabricIrq6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FabricIrq7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FabricIrq8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FabricIrq9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>GPIO11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIO12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO28_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIO8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>HPDMA_Complete_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>HPDMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_SMBAlert_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C0_SMBus_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_SMBAlert_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_SMBus_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>MDDR_IOCalib_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PLL_LockLost_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL_Lock_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_Wakeup_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Timer2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USB_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WdogWakeup_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>mscc_post_hw_cfg_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_m2sxxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_m2sxxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; silicon_workarounds
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_clock_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silicon_workarounds
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscc_post_hw_cfg_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(.text)
</UL>
<P><STRONG><a name="[200]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_m2sxxx.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>XM_Task</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = XM_Task &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[96]"></a>prep_oper</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prep_oper &rArr; ckstate_update &rArr; SaveTo3_32 &rArr; SaveTo3
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_ok_proce
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_manage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ckstate_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_main_prog
</UL>

<P><STRONG><a name="[9a]"></a>ck_main_prog</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ck_main_prog &rArr; temperature_control &rArr; cmdEnqueue &rArr; Mem_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_control
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prep_oper
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[9d]"></a>CanLX_send</STRONG> (Thumb, 202 bytes, Stack size 112 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CanLX_send &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[a9]"></a>SysTick_Init</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSTaskStkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SW_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_HW_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ab]"></a>Init_vari</STRONG> (Thumb, 1096 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
</UL>

<P><STRONG><a name="[ae]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>

<P><STRONG><a name="[bb]"></a>u8_2_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, basic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_Process
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YK_Cmd_Process
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_Data_Analysis
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>

<P><STRONG><a name="[d1]"></a>u16_2_u8</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, basic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YC_Request_Process
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_SC_Request_Process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YC_Pack
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>

<P><STRONG><a name="[cd]"></a>u8_2_u32</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8_2_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YK_Cmd_Process
</UL>

<P><STRONG><a name="[ce]"></a>u8_2_flt</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u8_2_flt
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YK_Cmd_Process
</UL>

<P><STRONG><a name="[d8]"></a>u8_2_dbl</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = u8_2_dbl
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
</UL>

<P><STRONG><a name="[e2]"></a>u32_2_u8</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, basic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SJACanSend_PELI
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Frame_Send
</UL>

<P><STRONG><a name="[201]"></a>flt_2_u8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>Get_Bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, basic.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>Set_Bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, basic.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>Clear_Bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, basic.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>Swap_Value</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, basic.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>sign</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>

<P><STRONG><a name="[b5]"></a>pow_new</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>

<P><STRONG><a name="[206]"></a>XorCheckSum8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, basic.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>XorCheckSum16</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XorCheckSum16
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YC_Request_Process
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_SC_Request_Process
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YC_Pack
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>

<P><STRONG><a name="[207]"></a>XorCheckSum32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, basic.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>AddCheckSum8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddCheckSum8
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YK_Cmd_Process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Analysis
</UL>

<P><STRONG><a name="[dc]"></a>AddCheckSum16</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddCheckSum16
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YC_Pack
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_Data_Analysis
</UL>

<P><STRONG><a name="[208]"></a>CRC16</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, basic.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>CRC16_2</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16_2
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_Data_Analysis
</UL>

<P><STRONG><a name="[b7]"></a>GetVersion</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u16
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[bc]"></a>GPIO_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, extern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_init &rArr; MSS_GPIO_enable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_enable_irq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_HW_Init
</UL>

<P><STRONG><a name="[a6]"></a>System_HW_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, extern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = System_HW_Init &rArr; CANIP_Init &rArr; Delay_c &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>System_SW_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, extern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = System_SW_Init &rArr; UART_Soft_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Soft_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Soft_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>Timer1_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, extern.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>GPIO9_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, extern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GPIO9_IRQHandler &rArr; CANIP_ISR &rArr; CANIP_Frame_Recv &rArr; CANIP_Read &rArr; Delay_c &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_clear_irq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIO10_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, extern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GPIO10_IRQHandler &rArr; CANIP_ISR &rArr; CANIP_Frame_Recv &rArr; CANIP_Read &rArr; Delay_c &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_clear_irq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO30_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, extern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO30_IRQHandler &rArr; MSS_GPIO_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_clear_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>FPGAUart_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fpgauart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_HW_Init
</UL>

<P><STRONG><a name="[d7]"></a>FPGAUart_SendByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpgauart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GZ_UART_Data_Analysis
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>

<P><STRONG><a name="[8d]"></a>FPGAUart_SendString</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpgauart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Send
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLX_send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XM_Task
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YkTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOCCTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLYTask
</UL>

<P><STRONG><a name="[d3]"></a>FPGAUart_SendArray</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FPGAUart_SendArray
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YC_Request_Process
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_SC_Request_Process
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YC_Send
</UL>

<P><STRONG><a name="[c6]"></a>delay_1ms</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = delay_1ms &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Array
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
</UL>

<P><STRONG><a name="[c8]"></a>FPGAUart_ReceiveByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fpgauart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_ReceiveArray
</UL>

<P><STRONG><a name="[c7]"></a>FPGAUart_ReceiveArray</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, fpgauart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_ReceiveByte
</UL>

<P><STRONG><a name="[da]"></a>Is_FPGA_Uart_RxFifo_Empty</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Is_FPGA_Uart_RxFifo_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GZ_UART_Data_Analysis
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_Data_Analysis
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>

<P><STRONG><a name="[c2]"></a>UART_Soft_Init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Soft_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SW_Init
</UL>

<P><STRONG><a name="[cb]"></a>UART_Reset</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_Data_Analysis
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>

<P><STRONG><a name="[cc]"></a>TXJ_UART_YK_Cmd_Process</STRONG> (Thumb, 1534 bytes, Stack size 16 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TXJ_UART_YK_Cmd_Process &rArr; u8_2_flt
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCheckSum8
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_flt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u32
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_Process
</UL>

<P><STRONG><a name="[d0]"></a>CX_UART_SC_Request_Process</STRONG> (Thumb, 764 bytes, Stack size 16 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CX_UART_SC_Request_Process &rArr; FPGAUart_SendArray
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendArray
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorCheckSum16
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16_2_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_Process
</UL>

<P><STRONG><a name="[d4]"></a>CX_UART_YC_Request_Process</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CX_UART_YC_Request_Process &rArr; FPGAUart_SendArray
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendArray
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorCheckSum16
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16_2_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_Process
</UL>

<P><STRONG><a name="[d5]"></a>CX_UART_YK_Cmd_Process</STRONG> (Thumb, 4236 bytes, Stack size 304 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = CX_UART_YK_Cmd_Process &rArr; delay_1ms &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCheckSum8
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_dbl
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_flt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u32
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u16
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_Process
</UL>

<P><STRONG><a name="[d9]"></a>UART_Data_Process</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = UART_Data_Process &rArr; CX_UART_YK_Cmd_Process &rArr; delay_1ms &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YC_Request_Process
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_SC_Request_Process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YK_Cmd_Process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_Data_Analysis
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>

<P><STRONG><a name="[92]"></a>CX_UART_Data_Analysis</STRONG> (Thumb, 2040 bytes, Stack size 64 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = CX_UART_Data_Analysis &rArr; UART_Data_Process &rArr; CX_UART_YK_Cmd_Process &rArr; delay_1ms &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_Process
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_FPGA_Uart_RxFifo_Empty
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendByte
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorCheckSum16
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16_2_u8
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u16
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YkTask
</UL>

<P><STRONG><a name="[93]"></a>DC_UART_Data_Analysis</STRONG> (Thumb, 2048 bytes, Stack size 64 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = DC_UART_Data_Analysis &rArr; UART_Data_Process &rArr; CX_UART_YK_Cmd_Process &rArr; delay_1ms &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_Process
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_FPGA_Uart_RxFifo_Empty
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendByte
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorCheckSum16
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16_2_u8
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u16
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YkTask
</UL>

<P><STRONG><a name="[94]"></a>TXJ_UART_Data_Analysis</STRONG> (Thumb, 860 bytes, Stack size 48 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = TXJ_UART_Data_Analysis &rArr; UART_Data_Process &rArr; CX_UART_YK_Cmd_Process &rArr; delay_1ms &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_Process
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_FPGA_Uart_RxFifo_Empty
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCheckSum16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_2_u16
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YkTask
</UL>

<P><STRONG><a name="[90]"></a>TXJ_UART_YC_Pack</STRONG> (Thumb, 2252 bytes, Stack size 16 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TXJ_UART_YC_Pack &rArr; AddCheckSum16
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCheckSum16
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorCheckSum16
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16_2_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCTask
</UL>

<P><STRONG><a name="[91]"></a>TXJ_UART_YC_Send</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, fpgauart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TXJ_UART_YC_Send &rArr; FPGAUart_SendArray
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendArray
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCTask
</UL>

<P><STRONG><a name="[dd]"></a>GZ_UART_Data_Analysis</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, fpgauart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_FPGA_Uart_RxFifo_Empty
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendByte
</UL>

<P><STRONG><a name="[de]"></a>Delay_c</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Delay_c &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Init
</UL>

<P><STRONG><a name="[e0]"></a>CANIP_Write</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CANIP_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Frame_Recv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Frame_Send
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Init
</UL>

<P><STRONG><a name="[df]"></a>CANIP_Read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = CANIP_Read &rArr; Delay_c &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_c
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Frame_Recv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_ISR
</UL>

<P><STRONG><a name="[c1]"></a>CANIP_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = CANIP_Init &rArr; Delay_c &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_c
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_HW_Init
</UL>

<P><STRONG><a name="[e1]"></a>CANIP_Frame_Send</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANIP_Frame_Send &rArr; CANIP_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32_2_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Send
</UL>

<P><STRONG><a name="[e3]"></a>CANIP_Frame_Recv</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CANIP_Frame_Recv &rArr; CANIP_Read &rArr; Delay_c &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_ISR
</UL>

<P><STRONG><a name="[c5]"></a>CANIP_ISR</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = CANIP_ISR &rArr; CANIP_Frame_Recv &rArr; CANIP_Read &rArr; Delay_c &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Frame_Recv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO10_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO9_IRQHandler
</UL>

<P><STRONG><a name="[209]"></a>SJACanInit_PELI</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, fpgacan.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>SJACanInit_BASIC</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, fpgacan.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>SJACanReceive_PELI</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SJACanReceive_PELI
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO0_IRQHandler &rArr; SJACanReceive_PELI
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SJACanReceive_PELI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_clear_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[20b]"></a>SJACanSend_BASIC</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, fpgacan.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>SJACanReceive_BASIC</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, fpgacan.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>SJACanSend_PELI</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, fpgacan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32_2_u8
</UL>

<P><STRONG><a name="[c3]"></a>CAN_Soft_Init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Soft_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SW_Init
</UL>

<P><STRONG><a name="[e6]"></a>CAN_Soft_Reset</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Soft_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Analysis
</UL>

<P><STRONG><a name="[8e]"></a>CAN_Data_Analysis</STRONG> (Thumb, 754 bytes, Stack size 24 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_Data_Analysis &rArr; CAN_Soft_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Soft_Reset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCheckSum8
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[a0]"></a>CAN_Data_Send</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, fpgacan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_Data_Send &rArr; CANIP_Frame_Send &rArr; CANIP_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIP_Frame_Send
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLX_send
</UL>

<P><STRONG><a name="[e7]"></a>CAN_Receive</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_Receive &rArr; MSS_CAN_get_message_n
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_get_rx_buffer_status
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_get_message_n
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>CAN_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_IRQHandler &rArr; CAN_Receive &rArr; MSS_CAN_get_message_n
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_get_int_status
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_clear_int_status
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>CAN_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_start
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_set_mode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_set_int_ebl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_config_buffer_n
</UL>

<P><STRONG><a name="[f2]"></a>CAN_Send_OneFrame</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_set_id
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_send_message_n
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Array
</UL>

<P><STRONG><a name="[f5]"></a>CAN_Send_Array</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_OneFrame
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>

<P><STRONG><a name="[f6]"></a>CAN_Send</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_set_id
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_send_message_n
</UL>

<P><STRONG><a name="[f7]"></a>CAN_Demo</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_set_id
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_send_message_n
</UL>

<P><STRONG><a name="[97]"></a>entry_manage</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = entry_manage &rArr; SaveTo3_16 &rArr; SaveTo3
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prep_oper
</UL>

<P><STRONG><a name="[f9]"></a>get_time_48bit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time_48bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
</UL>

<P><STRONG><a name="[a1]"></a>systime_add</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = systime_add &rArr; SaveTo3_32 &rArr; SaveTo3
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_48bit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[98]"></a>gps_ok_proce</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gps_ok_proce &rArr; SaveTo3_16 &rArr; SaveTo3
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prep_oper
</UL>

<P><STRONG><a name="[fd]"></a>SaveTo3</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SaveTo3
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_CPU_FP64
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_CPU_FP32
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
</UL>

<P><STRONG><a name="[ac]"></a>SaveTo3_16</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SaveTo3_16 &rArr; SaveTo3
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_I16
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_ok_proce
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_manage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ckstate_update
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_vari
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdEnqueue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wk_data
</UL>

<P><STRONG><a name="[fe]"></a>SaveTo3_I16</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
</UL>

<P><STRONG><a name="[ad]"></a>SaveTo3_32</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SaveTo3_32 &rArr; SaveTo3
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_I32
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ckstate_update
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_vari
</UL>

<P><STRONG><a name="[ff]"></a>SaveTo3_I32</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_32
</UL>

<P><STRONG><a name="[100]"></a>SaveTo3_CPU_FP32</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3
</UL>

<P><STRONG><a name="[101]"></a>SaveTo3_CPU_FP64</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3
</UL>

<P><STRONG><a name="[102]"></a>getVarIn3_8</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
</UL>

<P><STRONG><a name="[9b]"></a>getVarIn3_16</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = getVarIn3_16
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_8
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_I16
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_32
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_control
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_ok_proce
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_manage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ckstate_update
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_main_prog
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdEnqueue
</UL>

<P><STRONG><a name="[103]"></a>getVarIn3_I16</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
</UL>

<P><STRONG><a name="[f8]"></a>getVarIn3_32</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getVarIn3_32 &rArr; getVarIn3_16
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_I32
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
</UL>

<P><STRONG><a name="[104]"></a>getVarIn3_I32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_32
</UL>

<P><STRONG><a name="[20d]"></a>urgent_ck</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flyprog.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>ckstate_update</STRONG> (Thumb, 872 bytes, Stack size 112 bytes, flyprog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ckstate_update &rArr; SaveTo3_32 &rArr; SaveTo3
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prep_oper
</UL>

<P><STRONG><a name="[9c]"></a>temperature_control</STRONG> (Thumb, 378 bytes, Stack size 208 bytes, flyprog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = temperature_control &rArr; cmdEnqueue &rArr; Mem_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdEnqueue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_main_prog
</UL>

<P><STRONG><a name="[106]"></a>get_wk_data</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, flyprog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
</UL>

<P><STRONG><a name="[105]"></a>cmdEnqueue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmdEnqueue &rArr; Mem_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVarIn3_16
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTo3_16
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_control
</UL>

<P><STRONG><a name="[10b]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[10c]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondSignal
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[20e]"></a>CPU_TS32_to_uSec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_cpu.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>BSP_CPU_ClkFreqGet</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, bsp_cpu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_APB_ClkFreqGet
</UL>

<P><STRONG><a name="[108]"></a>BSP_APB_ClkFreqGet</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bsp_cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreqGet
</UL>

<P><STRONG><a name="[a5]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolBlkNbrAvailGet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolBlkFree
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolBlkGet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegRemSizeGet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegClr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocInternal
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondCreate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondSignal
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskTimeQuantaSet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemSet
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[fc]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolBlkNbrAvailGet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolBlkFree
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolBlkGet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegRemSizeGet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegClr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocInternal
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondCreate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondSignal
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskTimeQuantaSet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemSet
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[210]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros32
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros16
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros08
</UL>

<P><STRONG><a name="[114]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros08
</UL>

<P><STRONG><a name="[212]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>CPU_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPU_Init &rArr; CPU_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>CPU_SW_Exception</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRedzoneHitHook
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqGet
</UL>

<P><STRONG><a name="[fa]"></a>CPU_TS_Get32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_TS_Get32
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
</UL>

<P><STRONG><a name="[213]"></a>CPU_TS_Update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_core.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>CPU_TS_TmrFreqGet</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
</UL>

<P><STRONG><a name="[214]"></a>CPU_TS_TmrFreqSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>CPU_CntLeadZeros08</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[111]"></a>CPU_CntLeadZeros16</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[112]"></a>CPU_CntLeadZeros32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[118]"></a>CPU_CntLeadZeros64</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros64
</UL>

<P><STRONG><a name="[113]"></a>CPU_CntTrailZeros08</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[115]"></a>CPU_CntTrailZeros16</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[116]"></a>CPU_CntTrailZeros32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[117]"></a>CPU_CntTrailZeros64</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros64
</UL>

<P><STRONG><a name="[215]"></a>CPU_PopCnt32</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cpu_core.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>CPU_StatReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_core.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>Mem_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_mem.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>Mem_Set</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>

<P><STRONG><a name="[119]"></a>Mem_Clr</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Set
</UL>

<P><STRONG><a name="[107]"></a>Mem_Copy</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, lib_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mem_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Move
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdEnqueue
</UL>

<P><STRONG><a name="[11b]"></a>Mem_Move</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Copy
</UL>

<P><STRONG><a name="[218]"></a>Mem_Cmp</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, lib_mem.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>Mem_SegCreate</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreateCritical
</UL>

<P><STRONG><a name="[11e]"></a>Mem_SegClr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[11f]"></a>Mem_SegRemSizeGet</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[122]"></a>Mem_SegAlloc</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocInternal
</UL>

<P><STRONG><a name="[123]"></a>Mem_SegAllocExt</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocInternal
</UL>

<P><STRONG><a name="[124]"></a>Mem_SegAllocHW</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocInternal
</UL>

<P><STRONG><a name="[126]"></a>Mem_DynPoolCreate</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolCreateInternal
</UL>

<P><STRONG><a name="[127]"></a>Mem_DynPoolCreateHW</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolCreateInternal
</UL>

<P><STRONG><a name="[128]"></a>Mem_DynPoolBlkGet</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocInternal
</UL>

<P><STRONG><a name="[129]"></a>Mem_DynPoolBlkFree</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[12a]"></a>Mem_DynPoolBlkNbrAvailGet</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[219]"></a>OSIdleTaskHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>OSInitHook</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[12b]"></a>OSRedzoneHitHook</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSRedzoneHitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[172]"></a>OSStatTaskHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[178]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[17b]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[18b]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[177]"></a>OSTaskStkInit</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[12c]"></a>OSTaskSwHook</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OSTaskSwHook &rArr; OSTaskStkRedzoneChk &rArr; OS_TaskStkRedzoneChk
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkRedzoneChk
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRedzoneHitHook
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_PendSVHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>

<P><STRONG><a name="[192]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[13]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OS_TickUpdate &rArr; OS_TickListUpdate &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInitFreq
</UL>

<P><STRONG><a name="[12e]"></a>OS_CPU_SysTickInitFreq</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
</UL>

<P><STRONG><a name="[13d]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[130]"></a>OS_IdleTask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>OS_IdleTaskInit</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSTaskStkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[135]"></a>OS_RdyListInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a8]"></a>OSInit</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSTaskStkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkRedzoneInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>OSIntEnter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[b1]"></a>OSIntExit</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OSTaskStkRedzoneChk &rArr; OS_TaskStkRedzoneChk
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkRedzoneChk
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkRedzoneChk
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRedzoneHitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[141]"></a>OSSched</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[143]"></a>OSSchedLock</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[144]"></a>OSSchedUnlock</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[145]"></a>OSSchedRoundRobinCfg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[147]"></a>OS_RdyListMoveHeadToTail</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
</UL>

<P><STRONG><a name="[146]"></a>OSSchedRoundRobinYield</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[aa]"></a>OSStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OSStartHighRdy &rArr; OSTaskSwHook &rArr; OSTaskStkRedzoneChk &rArr; OS_TaskStkRedzoneChk
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21a]"></a>OSVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[14e]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[149]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>

<P><STRONG><a name="[14b]"></a>OS_TaskBlock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[14d]"></a>OS_Pend</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
</UL>

<P><STRONG><a name="[155]"></a>OS_PendListRemove</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[153]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[152]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[150]"></a>OS_RdyListInsert</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[154]"></a>OS_PendAbort</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
</UL>

<P><STRONG><a name="[159]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[157]"></a>OS_PendListChangePrio</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_PendListChangePrio &rArr; OS_PendListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[160]"></a>OS_PendListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexClr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondCreate
</UL>

<P><STRONG><a name="[158]"></a>OS_Post</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondSignal
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
</UL>

<P><STRONG><a name="[15a]"></a>OS_SchedRoundRobin</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OS_SchedRoundRobin &rArr; OS_RdyListMoveHeadToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[13c]"></a>OS_Dbg_Init</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, os_dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_Dbg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[15c]"></a>OS_MemDbgListAdd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
</UL>

<P><STRONG><a name="[15b]"></a>OSMemCreate</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemDbgListAdd
</UL>

<P><STRONG><a name="[15d]"></a>OSMemGet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[15e]"></a>OSMemPut</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[136]"></a>OS_MemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[137]"></a>OS_MsgPoolInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MsgPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17a]"></a>OS_MsgQFreeAll</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
</UL>

<P><STRONG><a name="[176]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
</UL>

<P><STRONG><a name="[17f]"></a>OS_MsgQGet</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, os_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
</UL>

<P><STRONG><a name="[182]"></a>OS_MsgQPut</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, os_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
</UL>

<P><STRONG><a name="[161]"></a>OS_MutexDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[15f]"></a>OSMutexCreate</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListAdd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
</UL>

<P><STRONG><a name="[162]"></a>OS_MutexClr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[166]"></a>OS_MutexGrpPrioFindHighest</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_MutexGrpPrioFindHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
</UL>

<P><STRONG><a name="[165]"></a>OS_MutexGrpRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
</UL>

<P><STRONG><a name="[164]"></a>OS_MutexDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[163]"></a>OSMutexDel</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListRemove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexClr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[169]"></a>OS_MutexGrpAdd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
</UL>

<P><STRONG><a name="[168]"></a>OSMutexPend</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
</UL>

<P><STRONG><a name="[16a]"></a>OSMutexPendAbort</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[16b]"></a>OSMutexPost</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[16c]"></a>OS_MutexGrpPostAll</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[134]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[13f]"></a>OS_PrioGetHighest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_prio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[151]"></a>OS_PrioInsert</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_prio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[14a]"></a>OS_PrioRemove</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_prio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[16d]"></a>OSStatReset</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStatReset
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[16e]"></a>OSStatTaskCPUUsageInit</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, os_stat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[171]"></a>OS_StatTask</STRONG> (Thumb, 860 bytes, Stack size 32 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>OS_StatTaskInit</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSTaskStkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[167]"></a>OS_TaskChangePrio</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
</UL>

<P><STRONG><a name="[174]"></a>OSTaskChangePrio</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[179]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[133]"></a>OS_TaskStkRedzoneInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[175]"></a>OS_TaskInitTCB</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[a2]"></a>OSTaskCreate</STRONG> (Thumb, 500 bytes, Stack size 80 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSTaskStkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkRedzoneInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[17c]"></a>OS_TaskDbgListRemove</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[a3]"></a>OSTaskDel</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[17d]"></a>OSTaskQFlush</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
</UL>

<P><STRONG><a name="[17e]"></a>OSTaskQPend</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQGet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[180]"></a>OSTaskQPendAbort</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[181]"></a>OSTaskQPost</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[183]"></a>OSTaskRegGet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[184]"></a>OSTaskRegGetID</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[185]"></a>OSTaskRegSet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[170]"></a>OSTaskResume</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[186]"></a>OSTaskSemPend</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[187]"></a>OSTaskSemPendAbort</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[188]"></a>OSTaskSemPost</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[189]"></a>OSTaskSemSet</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[173]"></a>OSTaskStkChk</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[13e]"></a>OS_TaskStkRedzoneChk</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TaskStkRedzoneChk
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkRedzoneChk
</UL>

<P><STRONG><a name="[12d]"></a>OSTaskStkRedzoneChk</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkRedzoneChk &rArr; OS_TaskStkRedzoneChk
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkRedzoneChk
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[16f]"></a>OSTaskSuspend</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[18a]"></a>OSTaskTimeQuantaSet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[138]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[6f]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>OS_TickInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[18d]"></a>OS_TickUpdate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TickUpdate &rArr; OS_TickListUpdate &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[14c]"></a>OS_TickListInsert</STRONG> (Thumb, 162 bytes, Stack size 28 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>

<P><STRONG><a name="[18e]"></a>OS_TickListInsertDly</STRONG> (Thumb, 134 bytes, Stack size 36 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[156]"></a>OS_TickListRemove</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
</UL>

<P><STRONG><a name="[8f]"></a>OSTimeDly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_c
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XM_Task
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YkTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[18f]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>

<P><STRONG><a name="[190]"></a>OSTimeDlyResume</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[9e]"></a>OSTimeGet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLX_send
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[191]"></a>OSTimeSet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[b0]"></a>OSTimeTick</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OS_TickUpdate &rArr; OS_TickListUpdate &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[196]"></a>OS_TmrDbgListAdd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[195]"></a>OSTmrCreate</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrDbgListAdd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[19b]"></a>OS_TmrClr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[198]"></a>OS_TmrUnlink</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OS_TmrUnlink &rArr; OS_TmrCondSignal &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[19a]"></a>OS_TmrDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[199]"></a>OSTmrDel</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrDbgListRemove
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrClr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[19c]"></a>OSTmrRemainGet</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[19d]"></a>OSTmrSet</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[19e]"></a>OS_TmrLink</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TmrLink &rArr; OS_TmrCondSignal &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
</UL>

<P><STRONG><a name="[19f]"></a>OSTmrStart</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[1a0]"></a>OSTmrStateGet</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[1a1]"></a>OSTmrStop</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[1a3]"></a>OS_TmrTask</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = OS_TmrTask &rArr; OS_TmrLock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondWait
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>OS_TmrInit</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = OS_TmrInit &rArr; OSTaskCreate &rArr; OSTaskStkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrCondCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bd]"></a>MSS_GPIO_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mss_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSS_GPIO_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[be]"></a>MSS_GPIO_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mss_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[21b]"></a>MSS_GPIO_set_output</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mss_gpio.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>MSS_GPIO_drive_inout</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, mss_gpio.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>MSS_GPIO_enable_irq</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mss_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSS_GPIO_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[21d]"></a>MSS_GPIO_disable_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mss_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>MSS_GPIO_clear_irq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mss_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSS_GPIO_clear_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO30_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO10_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO9_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>MSS_CAN_config_buffer_n</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[ed]"></a>MSS_CAN_init</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_config_buffer_n
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[ef]"></a>MSS_CAN_start</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_set_config_reg
</UL>

<P><STRONG><a name="[1a6]"></a>MSS_CAN_set_config_reg</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_start
</UL>

<P><STRONG><a name="[ee]"></a>MSS_CAN_set_mode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[21e]"></a>MSS_CAN_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>MSS_CAN_get_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>MSS_CAN_set_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Demo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_OneFrame
</UL>

<P><STRONG><a name="[220]"></a>MSS_CAN_get_msg_filter_mask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>MSS_CAN_set_int_ebl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[221]"></a>MSS_CAN_clear_int_ebl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>MSS_CAN_get_global_int_ebl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>MSS_CAN_get_int_ebl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>MSS_CAN_clear_int_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mss_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>MSS_CAN_get_int_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mss_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[224]"></a>MSS_CAN_set_rtr_message_n</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>MSS_CAN_get_rtr_message_abort_n</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>MSS_CAN_config_buffer</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>MSS_CAN_get_message_n</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, mss_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSS_CAN_get_message_n
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[227]"></a>MSS_CAN_get_message</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>MSS_CAN_get_message_av</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>MSS_CAN_send_message_n</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Demo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_OneFrame
</UL>

<P><STRONG><a name="[229]"></a>MSS_CAN_send_message_abort_n</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>MSS_CAN_send_message_ready</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>MSS_CAN_get_tx_buffer_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_send_message
</UL>

<P><STRONG><a name="[1a7]"></a>MSS_CAN_send_message</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, mss_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_CAN_get_tx_buffer_status
</UL>

<P><STRONG><a name="[22b]"></a>MSS_CAN_get_mask_n</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>MSS_CAN_set_mask_n</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>MSS_CAN_get_rx_buffer_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mss_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[22d]"></a>MSS_CAN_get_error_status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>MSS_CAN_get_rx_error_count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>MSS_CAN_get_rx_gte96</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>MSS_CAN_get_tx_error_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>MSS_CAN_get_tx_gte96</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_can.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLX_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[78]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[1ab]"></a>__printf</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, __printf_ss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b9]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_Data_Analysis
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>

<P><STRONG><a name="[1b0]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[232]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_YK_Cmd_Process
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_control
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Analysis
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[233]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Reset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Soft_Init
</UL>

<P><STRONG><a name="[1b1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[236]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Reset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Soft_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Soft_Init
</UL>

<P><STRONG><a name="[237]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[ba]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[239]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[23c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[23d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1b4]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1aa]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1a9]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[70]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[1af]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[23f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[240]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[1b5]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[7e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[83]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[87]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[148]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSStartHighRdy &rArr; OSTaskSwHook &rArr; OSTaskStkRedzoneChk &rArr; OS_TaskStkRedzoneChk
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[142]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[140]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[12]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OS_CPU_PendSVHandler &rArr; OSTaskSwHook &rArr; OSTaskStkRedzoneChk &rArr; OS_TaskStkRedzoneChk
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1b9]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1bc]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1be]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1bf]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1c0]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1c2]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[b6]"></a>pow</STRONG> (Thumb, 2478 bytes, Stack size 112 bytes, pow.o(i.pow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow_new
</UL>

<P><STRONG><a name="[1c3]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[71]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ca]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1ce]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1d2]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1d0]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign
</UL>

<P><STRONG><a name="[1d1]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[241]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow_new
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign
</UL>

<P><STRONG><a name="[1d3]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1d6]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1d4]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1cd]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1cc]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1d5]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1d7]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1c9]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1d9]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1cf]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1c1]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1da]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>m2s050_rev_a_workarounds</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_m2sxxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silicon_workarounds
</UL>

<P><STRONG><a name="[89]"></a>get_silicon_revision</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_m2sxxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silicon_workarounds
</UL>

<P><STRONG><a name="[88]"></a>silicon_workarounds</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system_m2sxxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = silicon_workarounds
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_silicon_revision
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2s050_rev_a_workarounds
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8b]"></a>complete_clock_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_m2sxxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6d]"></a>FLYTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLYTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>AOCCTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AOCCTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>CanTask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = CanTask &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Analysis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>YCTask</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = YCTask &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YC_Send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_YC_Pack
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>YkTask</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = YkTask &rArr; DC_UART_Data_Analysis &rArr; UART_Data_Process &rArr; CX_UART_YK_Cmd_Process &rArr; delay_1ms &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXJ_UART_Data_Analysis
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_UART_Data_Analysis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CX_UART_Data_Analysis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>MainTask</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = MainTask &rArr; ck_main_prog &rArr; temperature_control &rArr; cmdEnqueue &rArr; Mem_Copy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systime_add
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLX_send
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_main_prog
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XM_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>AppTaskStart</STRONG> (Thumb, 1080 bytes, Stack size 104 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGAUart_SendString
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>CPU_TS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[11d]"></a>Mem_SegCreateCritical</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCreate
</UL>

<P><STRONG><a name="[121]"></a>Mem_SegAllocExtCritical</STRONG> (Thumb, 168 bytes, Stack size 36 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocInternal
</UL>

<P><STRONG><a name="[120]"></a>Mem_SegAllocInternal</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocExtCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolBlkGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocHW
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocExt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAlloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolCreateInternal
</UL>

<P><STRONG><a name="[125]"></a>Mem_DynPoolCreateInternal</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAllocInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolCreateHW
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DynPoolCreate
</UL>

<P><STRONG><a name="[18c]"></a>OS_TickListUpdate</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OS_TickListUpdate &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
</UL>

<P><STRONG><a name="[193]"></a>OS_TmrUnlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[194]"></a>OS_TmrLock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = OS_TmrLock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[197]"></a>OS_TmrCondSignal</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OS_TmrCondSignal &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
</UL>

<P><STRONG><a name="[1a2]"></a>OS_TmrCondWait</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = OS_TmrCondWait &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[1a4]"></a>OS_TmrCondCreate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TmrCondCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
</UL>

<P><STRONG><a name="[1a5]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_GPIO_clear_irq
</UL>

<P><STRONG><a name="[72]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[1d8]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1cb]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
